{"version":3,"file":"static/js/auth-page.c8a7113e.chunk.js","mappings":"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","sources":["components/Forms/FormLogin/userValidationSchema.jsx","webpack://bookstore/./src/components/Forms/FormLogin/FormLogin.module.scss?9dfa","components/Forms/FormLogin/FormLogin.jsx","webpack://bookstore/./src/components/TotalPricePageComponent/TotalPricePageComponent.module.scss?5a67","components/TotalPricePageComponent/TotalPricePageComponent.jsx","components/Forms/FormRegistration/userValidationSchema.jsx","webpack://bookstore/./src/components/Forms/FormRegistration/FormRegistration.module.scss?35b2","components/Forms/FormRegistration/FormRegistration.jsx","webpack://bookstore/./src/components/UserAuthPageComponent/UserAuthPageComponent.module.scss?7e8b","components/UserAuthPageComponent/UserAuthPageComponent.jsx","pages/AuthPage.jsx"],"sourcesContent":["import * as Yup from 'yup';\n\nconst emailRegexp =\n  /^[-!#$%&'*+/=?^_`{|}~A-Za-z0-9]+(?:\\.[-!#$%&'*+/=?^_`{|}~A-Za-z0-9]+)*@([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])?\\.)+[A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9]/;\n\nexport const userValidationSchema = Yup.object().shape({\n  email: Yup.string()\n    .matches(emailRegexp, 'Введіть коректний email address')\n    .required('Email є обов`язковим'),\n  password: Yup.string()\n    .required(\"Пароль є обов'язковим\")\n    .min(6, 'Пароль повинен бути не менше 6 символів'),\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"formWrapper\":\"FormLogin_formWrapper__MoR9m\",\"buttonSubmit\":\"FormLogin_buttonSubmit__hUEtG\",\"buttonSubmitGap\":\"FormLogin_buttonSubmitGap__dCX3g\",\"buttonCancel\":\"FormLogin_buttonCancel__z0EFc\",\"blockButton\":\"FormLogin_blockButton__37reB\",\"inputGroup\":\"FormLogin_inputGroup__HmQxn\",\"inputLabel\":\"FormLogin_inputLabel__nHSSY\",\"input\":\"FormLogin_input__0g-56\",\"inputGroupBlock\":\"FormLogin_inputGroupBlock__6KT7q\",\"errorInput\":\"FormLogin_errorInput__lOfS7\",\"showPasswordButton\":\"FormLogin_showPasswordButton__tcUAH\",\"iconShow\":\"FormLogin_iconShow__lYJLc\",\"wrapperLock\":\"FormLogin_wrapperLock__Fjke9\",\"lockLink\":\"FormLogin_lockLink__HOptD\",\"spinner\":\"FormLogin_spinner__PiQCS\"};","import { useFormik } from 'formik';\nimport { userValidationSchema } from './userValidationSchema';\n\nimport { ICONS } from 'assets/icons';\nimport s from './FormLogin.module.scss';\nimport { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { currentUser, loginUser } from 'redux/operations/operations-user';\nimport { Spinner } from 'components/Spinner';\nimport * as selectors from 'redux/selectors';\nimport { handleErrorLogin } from 'utils/handleErrorLogin';\n\nexport function FormLogin() {\n  const [showPassword, setShowPassword] = useState(false);\n  const isLoading = useSelector(selectors.isLoading);\n  const dispatch = useDispatch();\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema: userValidationSchema,\n\n    onSubmit: async values => {\n      try {\n        const formData = Object.keys(values).reduce((acc, key) => {\n          if (values[key]) {\n            acc[key] = values[key];\n          }\n          return acc;\n        }, {});\n        const resp = await dispatch(loginUser({ ...formData }));\n        if (resp.meta.requestStatus === 'fulfilled') {\n          await dispatch(currentUser()).then(\n            ({ meta }) => meta.requestStatus === 'fulfilled'\n          );\n        }\n        if (resp.meta.requestStatus === 'rejected') {\n          setErrors(handleErrorLogin({ ...formData }));\n        }\n      } catch (error) {\n        setErrors({ error: error?.response?.data?.message });\n      }\n    },\n  });\n  const {\n    values: { email, password },\n    errors,\n    touched,\n    isValid,\n    dirty,\n    handleBlur,\n    handleChange,\n    handleSubmit,\n    setErrors,\n  } = formik;\n\n  return (\n    <>\n      <div className={s.formWrapper}>\n        <form onSubmit={handleSubmit}>\n          <div className={s.inputGroupBlock}>\n            <div className={s.inputGroup}>\n              <label className={s.inputLabel} htmlFor=\"email\">\n                Email\n              </label>\n              <input\n                className={s.input}\n                type=\"text\"\n                name=\"email\"\n                id=\"email\"\n                placeholder=\"Email\"\n                value={email}\n                onChange={handleChange}\n                onBlur={handleBlur}\n              />\n              {errors.email && touched.email && (\n                <small className={s.errorInput}>{errors.email}</small>\n              )}\n              {errors.error && (\n                <small className={s.errorInput}>{errors.error}</small>\n              )}\n            </div>\n            <div className={s.inputGroup}>\n              <label className={s.inputLabel} htmlFor=\"password\">\n                Пароль\n              </label>\n              <input\n                className={s.input}\n                type={showPassword ? 'text' : 'password'}\n                name=\"password\"\n                id=\"password\"\n                placeholder=\"Старий пароль\"\n                value={password}\n                onChange={handleChange}\n                onBlur={handleBlur}\n              />\n              <button\n                type=\"button\"\n                onClick={() => setShowPassword(!showPassword)}\n                className={s.showPasswordButton}\n              >\n                {showPassword ? (\n                  <ICONS.SHOWPASS className={s.iconShow} />\n                ) : (\n                  <ICONS.CLOSEPASS className={s.iconClose} />\n                )}\n              </button>\n              {errors.password && touched.password && (\n                <small className={s.errorInput}>\n                  {errors.password} {errors.error}\n                </small>\n              )}\n              {errors.error && (\n                <small className={s.errorInput}>{errors.error}</small>\n              )}\n            </div>\n          </div>\n          <div className={s.wrapperLock}>\n            <ICONS.LOCK className={s.iconLock} />\n            <Link to=\"#\" className={s.lockLink}>\n              Забули пароль?\n            </Link>\n          </div>\n          <div className={s.blockButton}>\n            <button\n              className={`${s.buttonSubmit}`}\n              type=\"submit\"\n              disabled={!isValid && !dirty}\n            >\n              Увійти\n            </button>\n          </div>\n        </form>\n        {isLoading && (\n          <div className={s.spinner}>\n            <Spinner />\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapperPrice\":\"TotalPricePageComponent_wrapperPrice__mZQqE\",\"title\":\"TotalPricePageComponent_title__uIwfh\",\"listPrice\":\"TotalPricePageComponent_listPrice__QGHSq\",\"textItemGroup\":\"TotalPricePageComponent_textItemGroup__58XH4\",\"itemPrice\":\"TotalPricePageComponent_itemPrice__-i6ra\",\"textItem\":\"TotalPricePageComponent_textItem__gJcmA\",\"buttonPrice\":\"TotalPricePageComponent_buttonPrice__AB4zF\",\"buttonPriceError\":\"TotalPricePageComponent_buttonPriceError__cq5Ps\",\"success\":\"TotalPricePageComponent_success__G3Gsx\",\"error\":\"TotalPricePageComponent_error__OadKS\",\"spinner\":\"TotalPricePageComponent_spinner__wUKnr\"};","import { useSelector } from 'react-redux';\nimport s from './TotalPricePageComponent.module.scss';\nimport * as selectors from 'redux/selectors';\nimport { handleErrorGoogle } from 'utils/handleError';\nimport { Spinner } from 'components/Spinner';\n\nexport const TotalPricePageComponent = ({\n  handleSubmit,\n  total,\n  orderTotal,\n  totalDiscount,\n  shippingCost,\n}) => {\n  const isAuth = useSelector(selectors.getIsAuth);\n  const cartError = useSelector(selectors.getCartError);\n  const cartSend = useSelector(selectors.getCartSend);\n  const isError = useSelector(selectors.cartIsError);\n  const isLoading = useSelector(selectors.cartIsLoading);\n  const msgError = handleErrorGoogle(cartError);\n\n  return (\n    <>\n      <div className={s.wrapperPrice}>\n        <span className={s.title}>Разом</span>\n        <ul className={s.listPrice}>\n          <li className={s.itemPrice}>\n            <div className={s.textItemGroup}>\n              <span className={s.textItem}>Сума замовлення</span>\n              <span className={s.textItem}>{total} грн</span>\n            </div>\n          </li>\n          <li className={s.itemPrice}>\n            <div className={s.textItemGroup}>\n              <span className={s.textItem}>Знижка</span>\n              <span className={s.textItem}>{totalDiscount} %</span>\n            </div>\n          </li>\n          <li className={s.itemPrice}>\n            <div className={s.textItemGroup}>\n              <span className={s.textItem}>Вартість доставки</span>\n              <span className={s.textItem}>{shippingCost} грн</span>\n            </div>\n          </li>\n          <li className={s.itemPrice}>\n            <div className={s.textItemGroup}>\n              <span className={s.textItem}>Сума разом</span>\n              <span className={s.textItem}>{orderTotal} грн</span>\n            </div>\n          </li>\n        </ul>\n        <button\n          className={`${\n            isError || (!isAuth && !cartSend)\n              ? s.buttonPriceError\n              : s.buttonPrice\n          }`}\n          type=\"button\"\n          onClick={handleSubmit}\n          disabled={isError || (!isAuth && !cartSend)}\n        >\n          Підтверджую замовлення\n        </button>\n\n        <div>\n          <small className={s.error}>{msgError}</small>\n        </div>\n\n        {cartSend ? (\n          <small className={s.success}>\n            Ваше замовлення успішно відправлено\n          </small>\n        ) : null}\n        {!isAuth && !cartSend ? (\n          <small className={s.success}>\n            Для відправки замовлення потрібно увійти або зареєструватися\n          </small>\n        ) : null}\n        {isLoading && (\n          <div className={s.spinner}>\n            <Spinner />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n","import * as Yup from 'yup';\n\nconst emailRegexp =\n  /^[-!#$%&'*+/=?^_`{|}~A-Za-z0-9]+(?:\\.[-!#$%&'*+/=?^_`{|}~A-Za-z0-9]+)*@([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])?\\.)+[A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9]/;\n\nconst nameRegexp = /^[A-Za-zА-Яа-яіІїЇєЄґҐ']+$/;\n\nexport const userValidationSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .max(20, 'Ім`я повинно бути не більше 20 символів')\n    .matches(nameRegexp, 'Ім`я може містити тільки літери')\n    .required('Введіть ваше ім`я'),\n  lastName: Yup.string()\n    .max(20, 'Прізвище повинно бути не більше 20 символів')\n    .matches(nameRegexp, 'Ім`я може містити тільки літери')\n    .required('Введіть ваше прізвище'),\n  fathersName: Yup.string()\n    .max(20, 'По батькові повинно бути не більше 20 символів')\n    .matches(nameRegexp, 'Ім`я може містити тільки літери')\n    .required('Введіть ваше по батькові'),\n  email: Yup.string()\n    .matches(emailRegexp, 'Введіть коректний email address')\n    .required('Email є обов`язковим'),\n  phone: Yup.string()\n    .required('Телефон є обов`язковим')\n    .max(20, 'Номер повинен бути не більше 20 символів'),\n  password: Yup.string()\n    .required(\"Пароль є обов'язковим\")\n    .min(6, 'Пароль повинен бути не менше 6 символів'),\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"formWrapper\":\"FormRegistration_formWrapper__3BBJo\",\"buttonSubmit\":\"FormRegistration_buttonSubmit__LHZjG\",\"blockButton\":\"FormRegistration_blockButton__nXMyV\",\"inputGroup\":\"FormRegistration_inputGroup__WgmfC\",\"inputLabel\":\"FormRegistration_inputLabel__oK263\",\"input\":\"FormRegistration_input__FyRJx\",\"inputGroupBlock\":\"FormRegistration_inputGroupBlock__TuAgK\",\"errorInput\":\"FormRegistration_errorInput__TkBTV\",\"showPasswordButton\":\"FormRegistration_showPasswordButton__9N9Ep\",\"iconShow\":\"FormRegistration_iconShow__wbDyz\",\"wrapperCheckbox\":\"FormRegistration_wrapperCheckbox__Veqa-\",\"inputCheckbox\":\"FormRegistration_inputCheckbox__l3+2I\",\"checkboxLabel\":\"FormRegistration_checkboxLabel__UnTy2\",\"iconCheckbox\":\"FormRegistration_iconCheckbox__1tN3b\",\"spinner\":\"FormRegistration_spinner__1+xGz\"};","import { useFormik } from 'formik';\nimport { userValidationSchema } from './userValidationSchema';\n\nimport PhoneInput, { isValidPhoneNumber } from 'react-phone-number-input';\nimport { ICONS } from 'assets/icons';\nimport s from './FormRegistration.module.scss';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  loginUser,\n  registerUser,\n  currentUser,\n} from 'redux/operations/operations-user';\nimport { Spinner } from 'components/Spinner';\nimport * as selectors from 'redux/selectors';\nimport { handleError } from 'utils';\n\nexport function FormRegistration() {\n  const [showPassword, setShowPassword] = useState(false);\n  const [isChecked, setIsChecked] = useState(false);\n  const isLoading = useSelector(selectors.isLoading);\n  const dispatch = useDispatch();\n  const formik = useFormik({\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      fathersName: '',\n      email: '',\n      phone: '',\n      password: '',\n    },\n    validationSchema: userValidationSchema,\n\n    onSubmit: async values => {\n      try {\n        const formData = Object.keys(values).reduce((acc, key) => {\n          if (values[key]) {\n            acc[key] = values[key];\n          }\n          return acc;\n        }, {});\n        const resp = await dispatch(registerUser({ ...formData }));\n        if (resp.meta.requestStatus === 'fulfilled') {\n          await dispatch(loginUser({ email, password })).then(\n            ({ meta }) => meta.requestStatus === 'fulfilled'\n          );\n          if (resp.meta.requestStatus === 'fulfilled') {\n            await dispatch(currentUser()).then(\n              ({ meta }) => meta.requestStatus === 'fulfilled'\n            );\n          }\n        }\n        if (resp.meta.requestStatus === 'rejected') {\n          setErrors(handleError({ email }));\n        }\n      } catch (error) {\n        setErrors({ error: error?.response?.data?.message });\n      }\n    },\n  });\n  const {\n    values: { firstName, lastName, fathersName, email, phone, password },\n    errors,\n    touched,\n    isValid,\n    dirty,\n    handleBlur,\n    handleChange,\n    setFieldValue,\n    handleSubmit,\n    setErrors,\n  } = formik;\n\n  const handleChangePhone = value => {\n    setFieldValue('phone', value);\n  };\n\n  return (\n    <>\n      <div className={s.formWrapper}>\n        <form onSubmit={handleSubmit}>\n          <div className={s.inputGroupBlock}>\n            <div className={s.inputGroup}>\n              <label className={s.inputLabel} htmlFor=\"firstName\">\n                Ім`я\n              </label>\n              <input\n                className={s.input}\n                type=\"text\"\n                name=\"firstName\"\n                id=\"firstName\"\n                placeholder=\"Ім`я\"\n                value={firstName}\n                onChange={handleChange}\n                onBlur={handleBlur}\n              />\n              {errors.firstName && touched.firstName && (\n                <small className={s.errorInput}>{errors.firstName}</small>\n              )}\n            </div>\n            <div className={s.inputGroup}>\n              <label className={s.inputLabel} htmlFor=\"lastName\">\n                Прізвище\n              </label>\n              <input\n                className={s.input}\n                type=\"text\"\n                name=\"lastName\"\n                id=\"lastName\"\n                placeholder=\"Прізвище\"\n                value={lastName}\n                onChange={handleChange}\n                onBlur={handleBlur}\n              />\n              {errors.lastName && touched.lastName && (\n                <small className={s.errorInput}>{errors.lastName}</small>\n              )}\n            </div>\n            <div className={s.inputGroup}>\n              <label className={s.inputLabel} htmlFor=\"fathersName\">\n                По батькові\n              </label>\n              <input\n                className={s.input}\n                type=\"text\"\n                name=\"fathersName\"\n                id=\"fathersName\"\n                placeholder=\"По батькові\"\n                value={fathersName}\n                onChange={handleChange}\n                onBlur={handleBlur}\n              />\n              {errors.fathersName && touched.fathersName && (\n                <small className={s.errorInput}>{errors.fathersName}</small>\n              )}\n            </div>\n            <div className={s.inputGroup}>\n              <label className={s.inputLabel} htmlFor=\"phone\">\n                Телефон\n              </label>\n              <PhoneInput\n                international\n                countryCallingCodeEditable={false}\n                className={s.input}\n                defaultCountry=\"UA\"\n                name=\"phone\"\n                id=\"phone\"\n                placeholder=\"Телефон\"\n                value={phone}\n                onChange={handleChangePhone}\n                onBlur={handleBlur}\n                error={\n                  phone\n                    ? isValidPhoneNumber(phone)\n                      ? undefined\n                      : 'Invalid phone number'\n                    : 'Phone number required'\n                }\n              />\n              {errors.phone && touched.phone && (\n                <small className={s.errorInput}>{errors.phone}</small>\n              )}\n            </div>\n            <div className={s.inputGroup}>\n              <label className={s.inputLabel} htmlFor=\"email\">\n                Email\n              </label>\n              <input\n                className={s.input}\n                type=\"text\"\n                name=\"email\"\n                id=\"email\"\n                placeholder=\"Email\"\n                value={email}\n                onChange={handleChange}\n                onBlur={handleBlur}\n              />\n              {errors.email && touched.email && (\n                <small className={s.errorInput}>{errors.email}</small>\n              )}\n              {errors.error && (\n                <small className={s.errorInput}>{errors.error}</small>\n              )}\n            </div>\n            <div className={s.inputGroup}>\n              <label className={s.inputLabel} htmlFor=\"password\">\n                Пароль\n              </label>\n              <input\n                className={s.input}\n                type={showPassword ? 'text' : 'password'}\n                name=\"password\"\n                id=\"password\"\n                placeholder=\"Пароль\"\n                value={password}\n                onChange={handleChange}\n                onBlur={handleBlur}\n              />\n              <button\n                type=\"button\"\n                onClick={() => setShowPassword(!showPassword)}\n                className={s.showPasswordButton}\n              >\n                {showPassword ? (\n                  <ICONS.SHOWPASS className={s.iconShow} />\n                ) : (\n                  <ICONS.CLOSEPASS className={s.iconClose} />\n                )}\n              </button>\n              {errors.password && touched.password && (\n                <small className={s.errorInput}>\n                  {errors.password} {errors.error}\n                </small>\n              )}\n              {errors.error && (\n                <small className={s.errorInput}>{errors.error}</small>\n              )}\n            </div>\n          </div>\n          <div className={s.blockButton}>\n            <button\n              className={`${s.buttonSubmit} ${s.buttonSubmitGap}`}\n              type=\"submit\"\n              disabled={!isValid && !dirty}\n            >\n              Зберегти\n            </button>\n\n            <div className={s.wrapperCheckbox}>\n              <input\n                className={s.inputCheckbox}\n                id=\"checkbox\"\n                type=\"checkbox\"\n                checked={isChecked}\n                onChange={() => {\n                  setIsChecked(prev => !prev);\n                }}\n              />\n              <button\n                type=\"button\"\n                onClick={() => setIsChecked(prev => !prev)}\n                className={s.iconCheckbox}\n              >\n                {isChecked ? <ICONS.CHECKED /> : <ICONS.DEFAULT_CHECKED />}\n              </button>\n              <label htmlFor=\"checkbox\" className={s.checkboxLabel}>\n                Створити обліковий запис\n              </label>\n            </div>\n          </div>\n        </form>\n        {isLoading && (\n          <div className={s.spinner}>\n            <Spinner />\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapperPageForm\":\"UserAuthPageComponent_wrapperPageForm__vJaZ7\",\"groupTotalPrice\":\"UserAuthPageComponent_groupTotalPrice__fsuRg\",\"blockWrapper\":\"UserAuthPageComponent_blockWrapper__Ec9dE\",\"title\":\"UserAuthPageComponent_title__njJJO\",\"wrapperpageActive\":\"UserAuthPageComponent_wrapperpageActive__ASmLW\",\"blockpageActive\":\"UserAuthPageComponent_blockpageActive__Y9lX6\",\"titleWrapper\":\"UserAuthPageComponent_titleWrapper__ZYjDj\",\"titleForm\":\"UserAuthPageComponent_titleForm__xujCM\",\"pageActive\":\"UserAuthPageComponent_pageActive__CvRLr\",\"activeLink\":\"UserAuthPageComponent_activeLink__xlPxG\",\"inactiveLink\":\"UserAuthPageComponent_inactiveLink__-xnQ8\"};","import { useEffect, useRef, useState } from 'react';\nimport { NavLink, useNavigate } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport * as selectors from 'redux/selectors';\nimport { routesPath } from 'router/routesPath';\nimport { pages } from 'constants/pages';\nimport { Breadcrumbs } from 'components/Breadcrumbs';\nimport { Container } from 'components/Containers/Container';\nimport { FlexWrapper } from 'components/Containers/FlexWrapper';\nimport { FormRegistration } from 'components/Forms/FormRegistration';\nimport { FormLogin } from 'components/Forms/FormLogin';\nimport { OrderForm } from 'components/Forms';\nimport { TotalPricePageComponent } from 'components/TotalPricePageComponent';\n\nimport s from './UserAuthPageComponent.module.scss';\nimport { submitOrder } from 'services/submitOrder';\nimport { calculateTotal, shippingCost, totalDiscount } from 'utils';\n\nexport const UserAuthPageComponent = ({ isRegister }) => {\n  const isAuth = useSelector(selectors.getIsAuth);\n  const [successMessage, setSuccessMessage] = useState(false);\n  const getOrderItems = useSelector(selectors.getCartItems);\n  const name = useSelector(selectors.getUserFirstName);\n  const lastName = useSelector(selectors.getUserLastName);\n  const fathersName = useSelector(selectors.getUserFathersName);\n  const phone = useSelector(selectors.getUserPhone);\n  const email = useSelector(selectors.getUserEmail);\n  const total = calculateTotal(getOrderItems);\n  const orderTotal = (\n    (total * (100 - totalDiscount)) / 100 +\n    shippingCost\n  ).toFixed(1);\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (isAuth) {\n      navigate(routesPath.ORDER);\n    }\n  }, [isAuth, navigate]);\n  const formRef = useRef(null);\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const formData = new FormData(formRef.current);\n    const orderData = Object.fromEntries(formData.entries());\n    for (const key in orderData) {\n      if (Object.hasOwnProperty.call(orderData, key)) {\n        const value = orderData[key];\n        formData.set(key, value);\n      }\n    }\n    formData.set('name', name || '');\n    formData.set('lastName', lastName || '');\n    formData.set('fathersName', fathersName || '');\n    formData.set('phone', phone || '');\n    formData.set('email', email || '');\n    formData.set('shippingCost', shippingCost || '');\n    formData.set('totalDiscount', totalDiscount || '');\n    formData.set('total', total || '');\n    formData.set('orderTotal', orderTotal || '');\n\n    try {\n      if (isAuth) {\n        await submitOrder(formData);\n        setSuccessMessage(true);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return (\n    <>\n      <Container>\n        <FlexWrapper>\n          <div className={s.wrapperPageForm}>\n            <div>\n              <Breadcrumbs\n                breadcrumbs={\n                  isRegister\n                    ? [pages.HOME, pages.LOGIN]\n                    : [pages.HOME, pages.REGISTER]\n                }\n              />\n              <h2 className={s.title}>Оформлення замовлення</h2>\n              <div className={s.blockWrapper}>\n                <div className={s.titleWrapper}>\n                  <span className={s.titleForm}>Особисті дані</span>\n                </div>\n                <div className={s.wrapperpageActive}>\n                  <div className={s.blockpageActive}>\n                    <NavLink\n                      className={({ isActive }) =>\n                        isActive\n                          ? `${s.pageActive} ${s.activeLink}`\n                          : `${s.pageActive} ${s.inactiveLink}`\n                      }\n                      to=\"/register\"\n                    >\n                      Новий покупець\n                    </NavLink>\n                  </div>\n                  <div className={s.blockpageActive}>\n                    <NavLink\n                      className={({ isActive }) =>\n                        isActive\n                          ? `${s.pageActive} ${s.activeLink}`\n                          : `${s.pageActive} ${s.inactiveLink}`\n                      }\n                      to=\"/login\"\n                    >\n                      Постійний клієнт\n                    </NavLink>\n                  </div>\n                </div>\n              </div>\n              {isRegister ? (\n                !isAuth ? (\n                  <FormRegistration />\n                ) : (\n                  <p>Я Віталій Валерійович</p>\n                )\n              ) : (\n                <FormLogin />\n              )}\n              <OrderForm handleSubmit={handleSubmit} ref={formRef} />\n            </div>\n            <div className={s.groupTotalPrice}>\n              <TotalPricePageComponent\n                handleSubmit={handleSubmit}\n                total={total}\n                orderTotal={orderTotal}\n                totalDiscount={totalDiscount}\n                shippingCost={shippingCost}\n                successMessage={successMessage}\n              />\n            </div>\n          </div>\n        </FlexWrapper>\n      </Container>\n    </>\n  );\n};\n","import { UserAuthPageComponent } from 'components/UserAuthPageComponent';\n\nconst AuthPage = ({ isRegister, isOrder }) => {\n  return <UserAuthPageComponent isRegister={isRegister} isOrder={isOrder} />;\n};\n\nexport default AuthPage;\n"],"names":["userValidationSchema","Yup","shape","email","matches","required","password","min","FormLogin","useState","showPassword","setShowPassword","isLoading","useSelector","selectors","dispatch","useDispatch","formik","useFormik","initialValues","validationSchema","onSubmit","values","formData","Object","keys","reduce","acc","key","loginUser","resp","meta","requestStatus","currentUser","then","setErrors","handleErrorLogin","error","response","data","message","errors","touched","isValid","dirty","handleBlur","handleChange","handleSubmit","className","s","htmlFor","type","name","id","placeholder","value","onChange","onBlur","onClick","to","disabled","Spinner","TotalPricePageComponent","total","orderTotal","totalDiscount","shippingCost","isAuth","cartError","cartSend","isError","msgError","handleErrorGoogle","nameRegexp","firstName","max","lastName","fathersName","phone","FormRegistration","isChecked","setIsChecked","registerUser","handleError","setFieldValue","international","countryCallingCodeEditable","defaultCountry","isValidPhoneNumber","undefined","checked","prev","UserAuthPageComponent","isRegister","successMessage","setSuccessMessage","getOrderItems","calculateTotal","toFixed","navigate","useNavigate","useEffect","routesPath","formRef","useRef","event","preventDefault","FormData","current","orderData","fromEntries","entries","hasOwnProperty","call","set","submitOrder","console","Container","FlexWrapper","Breadcrumbs","breadcrumbs","pages","isActive","ref","isOrder"],"sourceRoot":""}